################################################## PS
show_openstack_credential() {
    if [ "x$OS_USERNAME" == "x" ]; then
        echo ""
    else
        echo "[$OS_USERNAME - $OS_PROJECT_NAME - $OS_REGION_NAME] "
    fi
}
export PS1='\[\033[1;36m\][\A] openstack-cli $(show_openstack_credential)[\w]\[\033[00m\]\n\[\033[01;36m\]$ \[\033[00m\]'

export PYTHONWARNINGS="ignore"
alias ll='ls -l'

################################################### openstack
alias o="openstack --insecure"

# Nova
alias oconsole="openstack console log show"
alias oserverall="openstack server list --all-projects"
alias oag="openstack aggregate"

# Octavia
alias lb="openstack loadbalancer"
alias lbhealth="openstack loadbalancer healthmonitor"
alias lbstatus="openstack loadbalancer status show"
alias lbam="openstack loadbalancer amphora list --long --loadbalancer"
function lbstatus() {
    openstack loadbalancer status show $1 | yq -y .
}
function lbvipsg() {
    portid=$(openstack loadbalancer show $1 -c vip_port_id -f value)
    openstack port show $portid -f value -c security_group_ids
}
function lbvipfip() {
    local public_net=$2
    portid=$(openstack loadbalancer show $1 -c vip_port_id -f value)
    ret=$(openstack floating ip list -f value -c "Fixed IP Address" -c "Floating IP Address" | grep None | awk 'NR==1 {print}')
    if [[ -z $ret ]]; then
        if [[ -z $public_net ]]; then
            public_net=$(openstack network list --external -f value -c Name)
        fi
        fip=$(openstack floating ip create ${public_net} -c floating_ip_address -f value)
    else
        fip=${ret% *}
    fi

    echo "Attach floating IP $fip to port $portid"
    openstack floating ip set $fip --port $portid
}
function lbdelete() {
    for id in "$@"
    do
        openstack loadbalancer delete --cascade $id
        echo "loadbalancer $id is deleted"
    done
}

# Magnum/Heat
alias ocluster="openstack coe cluster"
alias ostackdel="openstack stack delete -y"
alias osrl="openstack stack resource list"

# Neutron
alias osg="openstack security group"
alias ofip="openstack floating ip"
alias ovmports="openstack port list --device-id"
function ovmfip() {
    local vmid=$1
    local public_net=$2
    ret=$(openstack floating ip list -f value -c "Fixed IP Address" -c "Floating IP Address" | grep None | awk 'NR==1 {print}')
    if [[ -z $ret ]]; then
        if [[ -z $public_net ]]; then
            public_net=$(openstack network list --external -f value -c Name)
        fi
        fip=$(openstack floating ip create ${public_net} -c floating_ip_address -f value)
    else
        fip=${ret% *}
    fi

    portid=$(openstack port list --device-id $vmid -c ID -f value)
    echo "Attach floating IP $fip to port $portid"
    openstack floating ip set $fip --port $portid
}
function oportfip() {
    local portid=$1
    local public_net=$2
    ret=$(openstack floating ip list -f value -c "Fixed IP Address" -c "Floating IP Address" | grep None | awk 'NR==1 {print}')
    if [[ -z $ret ]]; then
        if [[ -z $public_net ]]; then
            public_net=$(openstack network list --external -f value -c Name)
        fi
        fip=$(openstack floating ip create ${public_net} -c floating_ip_address -f value)
    else
        fip=${ret% *}
    fi

    echo "Attach floating IP $fip to port $portid"
    openstack floating ip set $fip --port $portid
}
function oportsg() {
    local portid=$1
    openstack port show $portid -c security_group_ids
}

# Trove
alias odb="openstack database"
alias odbi="openstack database instance"
alias odba="openstack database instance list --all-projects"
alias odbconf="openstack database configuration"
alias odbashort='odba -c ID -c Name -c Status -c "Operating Status" -c "Tenant ID"'
